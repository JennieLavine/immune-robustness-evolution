S[summaryTable$removed_receptor[i], summaryTable$removed_effector[i]] <-
FALSE
fitness <- summaryTable$fitness[i]
all_matrices[[as.character(id)]] <-
list(S = S, fitness = fitness)
}
}
summaryTable$n_edges <- 0
for (i in 1:length(all_matrices)) {
summaryTable$n_edges[i] <- sum(all_matrices[[i]]$S)
}
return(list(summaryTable, all_matrices))
}
else{
return(summaryTable)
}
}
test = calculate_dead_ends(mat_ids=c(28,94), alpha=0.01, max_edges_removed=3)
generate_summaryTable = function(mat_id, full=FALSE) {
setwd('Results_Aug_27')
table_name = generate_table_names(mat_id)
db <- dbConnect(SQLite(), table_name)
print(db)
print(dbListTables(db))
metaTable <- dbReadTable(db, "meta")
edgesTable <- dbReadTable(db, "edges")
summaryTable <- dbReadTable(db, "summary")
if(full==TRUE){
# Initialize S0, C0
n_receptors <- metaTable$n_receptors
n_effectors <- metaTable$n_effectors
S0 <- matrix(FALSE, nrow = n_receptors, ncol = n_effectors)
C0 <- matrix(0.0, nrow = n_receptors, ncol = n_effectors)
for (i in 1:nrow(edgesTable)) {
stopifnot(edgesTable$id[i] == 0)
S0[edgesTable$receptor[i], edgesTable$effector[i]] = TRUE
C0[edgesTable$receptor[i], edgesTable$effector[i]] = edgesTable$weight[i]
}
# Reconstruct a list mapping matrix ID to (matrix, fitness) pairs
all_matrices <- list()
for (i in 1:nrow(summaryTable)) {
id <- summaryTable$id[i]
cat(sprintf("Processing id %d...\n", id))
if (id == 0) {
all_matrices[["0"]] <-
list(S = S0, fitness = summaryTable$fitness[i])
}
else {
parent_id <- summaryTable$parent_id[i]
S <- all_matrices[[as.character(parent_id)]]$S
S[summaryTable$removed_receptor[i], summaryTable$removed_effector[i]] <-
FALSE
fitness <- summaryTable$fitness[i]
all_matrices[[as.character(id)]] <-
list(S = S, fitness = fitness)
}
}
summaryTable$n_edges <- 0
for (i in 1:length(all_matrices)) {
summaryTable$n_edges[i] <- sum(all_matrices[[i]]$S)
}
return(list(summaryTable, all_matrices))
}
else{
return(summaryTable)
}
}
test = calculate_dead_ends(mat_ids=c(28,94), alpha=0.01, max_edges_removed=3)
generate_summaryTable = function(mat_id, full=FALSE) {
getwd()
#setwd('Results_Aug_27')
table_name = generate_table_names(mat_id)
db <- dbConnect(SQLite(), table_name)
print(db)
print(dbListTables(db))
metaTable <- dbReadTable(db, "meta")
edgesTable <- dbReadTable(db, "edges")
summaryTable <- dbReadTable(db, "summary")
if(full==TRUE){
# Initialize S0, C0
n_receptors <- metaTable$n_receptors
n_effectors <- metaTable$n_effectors
S0 <- matrix(FALSE, nrow = n_receptors, ncol = n_effectors)
C0 <- matrix(0.0, nrow = n_receptors, ncol = n_effectors)
for (i in 1:nrow(edgesTable)) {
stopifnot(edgesTable$id[i] == 0)
S0[edgesTable$receptor[i], edgesTable$effector[i]] = TRUE
C0[edgesTable$receptor[i], edgesTable$effector[i]] = edgesTable$weight[i]
}
# Reconstruct a list mapping matrix ID to (matrix, fitness) pairs
all_matrices <- list()
for (i in 1:nrow(summaryTable)) {
id <- summaryTable$id[i]
cat(sprintf("Processing id %d...\n", id))
if (id == 0) {
all_matrices[["0"]] <-
list(S = S0, fitness = summaryTable$fitness[i])
}
else {
parent_id <- summaryTable$parent_id[i]
S <- all_matrices[[as.character(parent_id)]]$S
S[summaryTable$removed_receptor[i], summaryTable$removed_effector[i]] <-
FALSE
fitness <- summaryTable$fitness[i]
all_matrices[[as.character(id)]] <-
list(S = S, fitness = fitness)
}
}
summaryTable$n_edges <- 0
for (i in 1:length(all_matrices)) {
summaryTable$n_edges[i] <- sum(all_matrices[[i]]$S)
}
return(list(summaryTable, all_matrices))
}
else{
return(summaryTable)
}
}
test = calculate_dead_ends(mat_ids=c(28,94), alpha=0.01, max_edges_removed=3)
generate_summaryTable = function(mat_id, full=FALSE) {
getwd()
#setwd('Results_Aug_27')
table_name = generate_table_names(mat_id)
db <- dbConnect(SQLite(), paste("Results_Aug_27/",table_name, sep=''))
print(db)
print(dbListTables(db))
metaTable <- dbReadTable(db, "meta")
edgesTable <- dbReadTable(db, "edges")
summaryTable <- dbReadTable(db, "summary")
if(full==TRUE){
# Initialize S0, C0
n_receptors <- metaTable$n_receptors
n_effectors <- metaTable$n_effectors
S0 <- matrix(FALSE, nrow = n_receptors, ncol = n_effectors)
C0 <- matrix(0.0, nrow = n_receptors, ncol = n_effectors)
for (i in 1:nrow(edgesTable)) {
stopifnot(edgesTable$id[i] == 0)
S0[edgesTable$receptor[i], edgesTable$effector[i]] = TRUE
C0[edgesTable$receptor[i], edgesTable$effector[i]] = edgesTable$weight[i]
}
# Reconstruct a list mapping matrix ID to (matrix, fitness) pairs
all_matrices <- list()
for (i in 1:nrow(summaryTable)) {
id <- summaryTable$id[i]
cat(sprintf("Processing id %d...\n", id))
if (id == 0) {
all_matrices[["0"]] <-
list(S = S0, fitness = summaryTable$fitness[i])
}
else {
parent_id <- summaryTable$parent_id[i]
S <- all_matrices[[as.character(parent_id)]]$S
S[summaryTable$removed_receptor[i], summaryTable$removed_effector[i]] <-
FALSE
fitness <- summaryTable$fitness[i]
all_matrices[[as.character(id)]] <-
list(S = S, fitness = fitness)
}
}
summaryTable$n_edges <- 0
for (i in 1:length(all_matrices)) {
summaryTable$n_edges[i] <- sum(all_matrices[[i]]$S)
}
return(list(summaryTable, all_matrices))
}
else{
return(summaryTable)
}
}
test = calculate_dead_ends(mat_ids=c(28,94), alpha=0.01, max_edges_removed=3)
test
test = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
for(alpha_val in c(0, 0.001, 0.01, 0.1)){
res=rbind(res, calculate_dead_ends(mat_ids=c(28,94), alpha=alpha_val, max_edges_removed=3))
}
res
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
for(alpha_val in c( 0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=c(28,94), alpha=alpha_val, max_edges_removed=3))
}
res
calculate_dead_ends(94, 0.01, 3)
dat = generate_summaryTable(94, full=FALSE)
dat = generate_summaryTable(94, full=FALSE)
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
for(alpha_val in c( 0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=c(28,94), alpha=alpha_val, max_edges_removed=3))
}
res = calculate_dead_ends(mat_ids=c(28,
temp = calculate_dead_ends(94, 0.01, 3)
temp
fit.gene = list(NULL)
fit.gene
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
}
n_mat = n_mat+1
}
return(res)
}
temp = calculate_dead_ends(94, 0.01, 3)
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
for(alpha_val in c( 0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=c(28,94), alpha=alpha_val, max_edges_removed=3))
}
res
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
}
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
}
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
}
print(n_mat)
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
if(length(fit.ids)==0){break}
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
}
print(n_mat)
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
res
for(alpha_val in c( 0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=c(28,94), alpha=alpha_val, max_edges_removed=3))
}
res
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
if(length(fit.ids)==0){break}
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
}
print(n_mat)
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
res
rm(res)
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
res
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
if(length(fit.ids)==0){break}
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
if(length(fit.ids)==0){break}
}
print(n_mat)
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=c(28,94), alpha=0, max_edges_removed=3)
res
for(alpha_val in c( 0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=c(28,94), alpha=alpha_val, max_edges_removed=3))
}
res
res = calculate_dead_ends(mat_ids=c(2,28,94), alpha=0, max_edges_removed=3)
for(alpha_val in c( 0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=c(28,94), alpha=alpha_val, max_edges_removed=3))
}
res
res = calculate_dead_ends(mat_ids=c(2,28,94), alpha=0, max_edges_removed=3)
for(alpha_val in c( 0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=c(2,28,94), alpha=alpha_val, max_edges_removed=3))
}
res
