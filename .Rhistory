##############################################################
#Plot the data and fitted distribution #
##############################################################
plot(m)
lines(m)
##############################################################
#Copying #
##############################################################
## Shallow copy
m_cpy = m
m_cpy$setXmin(5)
m$getXmin()
## Instead
m_cpy = m$copy()
m
knitr::opts_chunk$set(echo = TRUE)
require(poweRlaw)
##############################################################
#Load data and create distribution object #
##############################################################
data(moby)
m = displ$new(moby)
##############################################################
#Xmin is initially the smallest x value #
##############################################################
m$getXmin()
m
m$getPars()
m
##############################################################
#Set Xmin and parameter #
##############################################################
m$setXmin(2)
m
m$setPars(2)
m
##############################################################
#Plot the data and fitted distribution #
##############################################################
plot(m)
lines(m)
plot(m)
lines(m)
?displ
m$get(Xmin)
m$getXmin()
m$getPars()
m$setXmin(2)
data(moby_sample)
moby_sample
hist(moby_sample)
hist(moby_sample, breaks=20)
hist(moby_sample, breaks=200)
1/sqrt(2.3)
getwd()
setwd('/Users/jennielavine/immune-robustness-evolution/')
data = read_tsv('mu_k_fitness.txt')
View(data)
data = read_tsv('mu_k_fitness.txt', col_names = false)
data = read_tsv('mu_k_fitness.txt', col_names = FALSE)
heatmap(data)
class(data)
heatmap(as.matrix(dadta))
heatmap(as.matrix(data))
range(data)
hist(data)
hist(unlist(data))
sum(unlist(data) < 100 & unlist(data) >1)
which(unlist(data) < 100 & unlist(data) >1)
library(RSQLite)
generate_table_names = function(x){paste('output_mat', x, '.sqlite', sep='')}
generate_summaryTable = function(mat_id, full=FALSE) {
#getwd()
#setwd('Results_Aug_27')
table_name = generate_table_names(mat_id)
db <- dbConnect(SQLite(), paste("Results_Aug_27/",table_name, sep=''))
#print(db)
#print(dbListTables(db))
metaTable <- dbReadTable(db, "meta")
edgesTable <- dbReadTable(db, "edges")
summaryTable <- dbReadTable(db, "summary")
if(full==TRUE){
# Initialize S0, C0
n_receptors <- metaTable$n_receptors
n_effectors <- metaTable$n_effectors
S0 <- matrix(FALSE, nrow = n_receptors, ncol = n_effectors)
C0 <- matrix(0.0, nrow = n_receptors, ncol = n_effectors)
for (i in 1:nrow(edgesTable)) {
stopifnot(edgesTable$id[i] == 0)
S0[edgesTable$receptor[i], edgesTable$effector[i]] = TRUE
C0[edgesTable$receptor[i], edgesTable$effector[i]] = edgesTable$weight[i]
}
# Reconstruct a list mapping matrix ID to (matrix, fitness) pairs
all_matrices <- list()
for (i in 1:nrow(summaryTable)) {
id <- summaryTable$id[i]
cat(sprintf("Processing id %d...\n", id))
if (id == 0) {
all_matrices[["0"]] <-
list(S = S0, fitness = summaryTable$fitness[i])
}
else {
parent_id <- summaryTable$parent_id[i]
S <- all_matrices[[as.character(parent_id)]]$S
S[summaryTable$removed_receptor[i], summaryTable$removed_effector[i]] <-
FALSE
fitness <- summaryTable$fitness[i]
all_matrices[[as.character(id)]] <-
list(S = S, fitness = fitness)
}
}
summaryTable$n_edges <- 0
for (i in 1:length(all_matrices)) {
summaryTable$n_edges[i] <- sum(all_matrices[[i]]$S)
}
return(list(summaryTable, all_matrices))
}
else{
return(summaryTable)
}
}
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
if(length(fit.ids)==0){break}
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
if(length(fit.ids)==0){break}
}
print(n_mat)
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=94, alpha=0, max_edges_removed=3)
for(alpha_val in c(0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=mat_ids, alpha=alpha_val, max_edges_removed=3))
}
res$deadend_ratio2 = res$n_deadends_2/res$n_paths_1
res$deadend_ratio3 = res$n_deadends_3/res$n_paths_2
res$redundancy [is.element(res$mat_id, high_redun_ind)] = 'high'
res$redundancy [is.element(res$mat_id, low_redun_ind)] = 'low'
high_redun_ordered <- as.factor(as.character(high_redun_ind), levels=high_redun_ind)
res
res = calculate_dead_ends(mat_ids=94, alpha=0, max_edges_removed=3)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
for(alpha_val in c(0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=mat_ids, alpha=alpha_val, max_edges_removed=3))
}
10^-3
#!/usr/bin/env Rscript
library(RSQLite)
generate_table_names = function(x){paste('output_mat', x, '.sqlite', sep='')}
generate_summaryTable = function(mat_id, full=FALSE) {
#getwd()
#setwd('Results_Aug_27')
table_name = generate_table_names(mat_id)
db <- dbConnect(SQLite(), paste("Results_Aug_27/",table_name, sep=''))
#print(db)
#print(dbListTables(db))
metaTable <- dbReadTable(db, "meta")
edgesTable <- dbReadTable(db, "edges")
summaryTable <- dbReadTable(db, "summary")
if(full==TRUE){
# Initialize S0, C0
n_receptors <- metaTable$n_receptors
n_effectors <- metaTable$n_effectors
S0 <- matrix(FALSE, nrow = n_receptors, ncol = n_effectors)
C0 <- matrix(0.0, nrow = n_receptors, ncol = n_effectors)
for (i in 1:nrow(edgesTable)) {
stopifnot(edgesTable$id[i] == 0)
S0[edgesTable$receptor[i], edgesTable$effector[i]] = TRUE
C0[edgesTable$receptor[i], edgesTable$effector[i]] = edgesTable$weight[i]
}
# Reconstruct a list mapping matrix ID to (matrix, fitness) pairs
all_matrices <- list()
for (i in 1:nrow(summaryTable)) {
id <- summaryTable$id[i]
cat(sprintf("Processing id %d...\n", id))
if (id == 0) {
all_matrices[["0"]] <-
list(S = S0, fitness = summaryTable$fitness[i])
}
else {
parent_id <- summaryTable$parent_id[i]
S <- all_matrices[[as.character(parent_id)]]$S
S[summaryTable$removed_receptor[i], summaryTable$removed_effector[i]] <-
FALSE
fitness <- summaryTable$fitness[i]
all_matrices[[as.character(id)]] <-
list(S = S, fitness = fitness)
}
}
summaryTable$n_edges <- 0
for (i in 1:length(all_matrices)) {
summaryTable$n_edges[i] <- sum(all_matrices[[i]]$S)
}
return(list(summaryTable, all_matrices))
}
else{
return(summaryTable)
}
}
#plot(jitter(summaryTable$n_edges), summaryTable$fitness, ylim=c(1,3))
# Do something with all this
combos=0
max_edges = 28
min_edges = 25
for(i in min_edges:max_edges){
combos = combos + factorial(max_edges)/
(factorial(i)*factorial(max_edges-i))
}
combos
combos - nrow(summaryTable)
n_edges_vec <-  unique(summaryTable$n_edges)
#!/usr/bin/env Rscript
library(RSQLite)
generate_table_names = function(x){paste('output_mat', x, '.sqlite', sep='')}
generate_summaryTable = function(mat_id, full=FALSE) {
#getwd()
#setwd('Results_Aug_27')
table_name = generate_table_names(mat_id)
db <- dbConnect(SQLite(), paste("Results_Aug_27/",table_name, sep=''))
#print(db)
#print(dbListTables(db))
metaTable <- dbReadTable(db, "meta")
edgesTable <- dbReadTable(db, "edges")
summaryTable <- dbReadTable(db, "summary")
if(full==TRUE){
# Initialize S0, C0
n_receptors <- metaTable$n_receptors
n_effectors <- metaTable$n_effectors
S0 <- matrix(FALSE, nrow = n_receptors, ncol = n_effectors)
C0 <- matrix(0.0, nrow = n_receptors, ncol = n_effectors)
for (i in 1:nrow(edgesTable)) {
stopifnot(edgesTable$id[i] == 0)
S0[edgesTable$receptor[i], edgesTable$effector[i]] = TRUE
C0[edgesTable$receptor[i], edgesTable$effector[i]] = edgesTable$weight[i]
}
# Reconstruct a list mapping matrix ID to (matrix, fitness) pairs
all_matrices <- list()
for (i in 1:nrow(summaryTable)) {
id <- summaryTable$id[i]
cat(sprintf("Processing id %d...\n", id))
if (id == 0) {
all_matrices[["0"]] <-
list(S = S0, fitness = summaryTable$fitness[i])
}
else {
parent_id <- summaryTable$parent_id[i]
S <- all_matrices[[as.character(parent_id)]]$S
S[summaryTable$removed_receptor[i], summaryTable$removed_effector[i]] <-
FALSE
fitness <- summaryTable$fitness[i]
all_matrices[[as.character(id)]] <-
list(S = S, fitness = fitness)
}
}
summaryTable$n_edges <- 0
for (i in 1:length(all_matrices)) {
summaryTable$n_edges[i] <- sum(all_matrices[[i]]$S)
}
return(list(summaryTable, all_matrices))
}
else{
return(summaryTable)
}
}
#plot(jitter(summaryTable$n_edges), summaryTable$fitness, ylim=c(1,3))
# Do something with all this
combos=0
max_edges = 28
min_edges = 25
for(i in min_edges:max_edges){
combos = combos + factorial(max_edges)/
(factorial(i)*factorial(max_edges-i))
}
combos
combos - nrow(summaryTable)
head(summaryTable)
#hist(summaryTable$fitness[summaryTable$parent_id==0])
#abline(v=summaryTable$fitness[1])
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
if(length(fit.ids)==0){break}
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
if(length(fit.ids)==0){break}
}
print(n_mat)
n_mat = n_mat+1
}
return(res)
}
high_redun_ind = c( 364 ,  2  ,28,  94, 437, 445, 510, 646, 802,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
print(paste('starting mat ID'), matID)
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
if(length(fit.ids)==0){break}
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
if(length(fit.ids)==0){break}
}
print(n_mat)
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
calculate_dead_ends = function(mat_ids, alpha, max_edges_removed) {
col_names = c('mat_id', 'alpha',
paste(c('n_paths_', 'n_deadends_'), rep(1:max_edges_removed, each=2), sep='')
)
res = matrix(NA, nrow=length(mat_ids), ncol=length(col_names))
colnames(res) = col_names
res<-as.data.frame(res)
n_mat = 1
for(matID in mat_ids){
print(paste('starting mat ID', matID))
dat = generate_summaryTable(matID, full=FALSE)
res$mat_id[n_mat] = matID
res$alpha[n_mat] = alpha
parent = 0
for (i in 1:max_edges_removed){
if(parent==0){
fit.ind = which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])
fit.ids = dat$id[fit.ind]
n_fit_ids = length(fit.ids)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), sum(fit.ids==0))
parent=parent+1
}
else {
fit.gene = list(NULL)
for (j in 1:n_fit_ids) {
if(length(fit.ids)==0){break}
parent = fit.ids[j]
fit.gene[[j]] = dat$id[which(dat$parent_id == parent &
dat$fitness > (1-alpha)*dat$fitness[dat$id == parent])]
}
fit.ids = unlist(fit.gene)
n_fit_ids = length(fit.ids)
n_deadends = sum(unlist(lapply(fit.gene, length)) == 0)
res[n_mat, grep(i, col_names)] = c(length(fit.ids), n_deadends)
}
if(length(fit.ids)==0){break}
}
print(n_mat)
n_mat = n_mat+1
}
return(res)
}
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
high_redun_ind = c( 364 ,  2  ,  94, 437, 445, 510, 646, 802,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
printwd()
getwd()
setwd("Results_Aug_27")
high_redun_ind = c( 364 ,  2  ,28,  94, 437, 445, 510, 646, 802,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
dat = generate_summaryTable(28, full=FALSE)
high_redun_ind = c( 364 ,  2  ,  94, 437, 445, 510, 646, 802,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
high_redun_ind = c( 364 ,  2  ,  94, 445, 510, 646, 802,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
high_redun_ind = c( 364 ,  2  ,  94, 510, 646, 802,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
table_name = generate_table_names(28)
db <- dbConnect(SQLite(), paste("Results_Aug_27/",table_name, sep=''))
#print(db)
#print(dbListTables(db))
metaTable <- dbReadTable(db, "meta")
edgesTable <- dbReadTable(db, "edges")
summaryTable <- dbReadTable(db, "summary")
high_redun_ind = c( 364 ,  2  , 94,  646, 802,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
high_redun_ind = c( 364 ,  2  , 94, 802,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
high_redun_ind = c( 364 ,  2  , 94,   50,  57,  66,  74 ,216, 305, 341, 455, 481)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977  ,19, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977, 223, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977, 438, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977, 679)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
low_redun_ind = c(347, 373, 381, 541, 561, 617, 677, 709, 798, 824, 841, 844, 850, 910 ,953 ,977)
mat_ids = c(high_redun_ind, low_redun_ind)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
res = calculate_dead_ends(mat_ids=mat_ids, alpha=0, max_edges_removed=3)
for(alpha_val in c(0.001, 0.01)){
res=rbind(res, calculate_dead_ends(mat_ids=mat_ids, alpha=alpha_val, max_edges_removed=3))
}
res$deadend_ratio2 = res$n_deadends_2/res$n_paths_1
res$deadend_ratio3 = res$n_deadends_3/res$n_paths_2
res$redundancy [is.element(res$mat_id, high_redun_ind)] = 'high'
res$redundancy [is.element(res$mat_id, low_redun_ind)] = 'low'
high_redun_ordered <- as.factor(as.character(high_redun_ind), levels=high_redun_ind)
plot(res$mat_id[res$alpha==0], res$deadend_ratio2[res$alpha==0], col=as.factor(res$redundancy[res$alpha==0.001]))
plot(res$mat_id[res$alpha==0], res$deadend_ratio2[res$alpha==0], col=as.factor(res$redundancy[res$alpha==0]))
plot(res$mat_id[res$alpha==0], res$deadend_ratio2[res$alpha==0], col=as.factor(res$redundancy[res$alpha==0.001]))
